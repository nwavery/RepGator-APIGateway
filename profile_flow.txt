RepGator Get User Profile Flow
=============================

Goal: A logged-in user retrieves their profile information (including name, email, address, and district ID).

Actors/Services Involved:
*   Mobile App
*   API Gateway
*   User Service

Pre-requisite: User is logged in, Mobile App has a valid JWT.

Flow Steps:
-----------

1.  Mobile App -> API Gateway (HTTP Request):
    *   User navigates to a screen requiring profile data (e.g., Profile/Settings screen, or implicitly before fetching representatives).
    *   Mobile App sends HTTP GET request to API Gateway: GET /user/profile.
    *   Includes Authorization: Bearer <JWT> header.

2.  API Gateway (HTTP -> Kafka Request):
    *   Receives GET /user/profile request.
    *   Validates JWT. If invalid, returns HTTP 401 Unauthorized.
    *   If valid, extracts userId from JWT (or X-User-Id header).
    *   Identifies target: user-service, action: get-profile.
    *   Generates correlationId (e.g., corrId_prof1).
    *   Determines request topic: req.api-gateway.user-service.get-profile.
    *   Determines reply topic: res.user-service.api-gateway.get-profile.
    *   Constructs Kafka Message:
        *   Topic: req.api-gateway.user-service.get-profile
        *   Key: userId
        *   Headers: correlationId=corrId_prof1, replyTopic=res.user-service.api-gateway.get-profile, sourceService=api-gateway
        *   Payload: (Empty or contains userId)
    *   Publishes message to Kafka.
    *   Listens on res.user-service.api-gateway.get-profile for corrId_prof1 (with timeout).

3.  User Service (Consume Get Profile Request):
    *   Listener consumes message from req.api-gateway.user-service.get-profile.
    *   Extracts headers (corrId_prof1, replyTopic).
    *   Extracts userId from Kafka message key.

4.  User Service (Process Request):
    *   Uses userId to query database (users table) for the user record.
    *   If User Found:
        *   Retrieves profile fields (user_id, name, email, address, district_id, preferences, etc.).
        *   Constructs User Profile DTO.
        *   Constructs success reply payload: { success: true, profile: { ... profile DTO ... } }.
        *   Proceeds to Step 5.
    *   If User Not Found:
        *   Constructs error reply payload: { success: false, error: "User profile not found" }.
        *   Proceeds to Step 5.

5.  User Service -> API Gateway (Produce Profile Reply via Kafka):
    *   Constructs Kafka Reply Message using payload from Step 4.
    *   Topic: res.user-service.api-gateway.get-profile (from request header)
    *   Headers: correlationId=corrId_prof1 (original request ID), sourceService=user-service
    *   Payload: Success or Error payload from Step 4.
    *   Publishes reply message to Kafka.

6.  API Gateway (Kafka Reply -> HTTP Response):
    *   Receives reply on res.user-service.api-gateway.get-profile, matches corrId_prof1.
    *   If Success Payload: Extracts profile object. Constructs HTTP 200 OK response with profile.
    *   If Error Payload: Extracts error message. Constructs HTTP 404 Not Found (or other) response.
    *   Sends HTTP response back to Mobile App.

7.  Mobile App (Handle Response):
    *   Receives HTTP response.
    *   If 200 OK: Parses profile data, updates local state (Zustand) including districtId, displays info.
    *   If Error: Handles error appropriately (e.g., show message, potential logout).

Kafka Topics Used in this Flow:
------------------------------
*   req.api-gateway.user-service.get-profile (API GW -> User Svc)
*   res.user-service.api-gateway.get-profile (User Svc -> API GW) 