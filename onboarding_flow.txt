RepGator User Onboarding (Registration) Flow
=========================================

Goal: A new user registers through the Mobile App.

Actors/Services Involved:
*   Mobile App
*   API Gateway
*   User Service
*   District Service (indirectly called by User Service)

Flow Steps:
-----------

1.  Mobile App -> API Gateway (HTTP Request):
    *   User fills registration form (name, email, password, address) on Mobile App.
    *   Mobile App sends HTTP POST request to API Gateway: POST /auth/register.
    *   Request Body: { "name": "...", "email": "...", "password": "...", "address": "..." }.

2.  API Gateway (HTTP -> Kafka Request):
    *   Receives POST /auth/register request.
    *   Identifies target: user-service, action: register.
    *   Generates correlationId (e.g., corrId_123).
    *   Determines request topic: req.api-gateway.user-service.register.
    *   Determines reply topic: res.user-service.api-gateway.register.
    *   Constructs Kafka Message:
        *   Topic: req.api-gateway.user-service.register
        *   Headers: correlationId=corrId_123, replyTopic=res.user-service.api-gateway.register, sourceService=api-gateway
        *   Payload: { "name": "...", "email": "...", "password": "...", "address": "..." }
    *   Publishes message to Kafka.
    *   Listens on res.user-service.api-gateway.register for corrId_123 (with timeout).

3.  User Service (Consume Registration Request):
    *   Listener consumes message from req.api-gateway.user-service.register.
    *   Extracts headers (corrId_123, replyTopic) and payload.
    *   Performs initial validation (email uniqueness, password policy).
    *   If validation fails: Constructs error reply { success: false, error: "Validation failed..." } -> Go to Step 7.
    *   If validation passes: Proceeds to get district ID.

4.  User Service -> District Service (Request District ID via Kafka):
    *   Generates NEW correlationId (e.g., corrId_456).
    *   Determines request topic: req.user-service.district-service.get-by-address.
    *   Determines reply topic: res.district-service.user-service.get-by-address.
    *   Constructs Kafka Message:
        *   Topic: req.user-service.district-service.get-by-address
        *   Headers: correlationId=corrId_456, replyTopic=res.district-service.user-service.get-by-address, sourceService=user-service
        *   Payload: { "address": "..." }
    *   Publishes message to Kafka.
    *   Listens on res.district-service.user-service.get-by-address for corrId_456 (with timeout).

5.  District Service (Consume District Request, Call Google API, Produce Reply):
    *   Listener consumes message from req.user-service.district-service.get-by-address.
    *   Extracts headers (corrId_456, replyTopic) and payload (address).
    *   Calls internal logic -> makes HTTP request to Google Civic Information API.
    *   Parses Google API response for district ID (e.g., "OK03") or error.
    *   Constructs Kafka Reply Message:
        *   Topic: res.district-service.user-service.get-by-address (from request header)
        *   Headers: correlationId=corrId_456, sourceService=district-service
        *   Payload: { success: true, districtId: "OK03" } OR { success: false, error: "District not found or API error" }
    *   Publishes reply message to Kafka.

6.  User Service (Receive District Reply, Finalize Registration):
    *   Receives reply on res.district-service.user-service.get-by-address, matches corrId_456.
    *   If District Success (success: true, districtId received):
        *   Hashes user password.
        *   Creates user record in DB (MySQL users table) with name, email, hash, address, districtId.
        *   Generates JWT.
        *   Constructs success reply payload for API GW: { success: true, token: "jwt...", user: { id: "...", email: "...", name: "...", districtId: "..." } }.
        *   Proceeds to Step 7.
        *   (Async Event): Publishes event to evt.user-service.user-registered (Payload: { userId: "...", email: "...", districtId: "..." }).
    *   If District Failure (timeout or success: false):
        *   Does NOT create user in DB.
        *   Constructs error reply payload for API GW: { success: false, error: "Failed to determine district..." }.
        *   Proceeds to Step 7.

7.  User Service -> API Gateway (Produce Final Reply via Kafka):
    *   Constructs final Kafka Reply Message using payload from Step 6.
    *   Topic: res.user-service.api-gateway.register (from original request header)
    *   Headers: correlationId=corrId_123 (original request ID), sourceService=user-service
    *   Payload: Success or Error payload from Step 6.
    *   Publishes reply message to Kafka.

8.  API Gateway (Kafka Reply -> HTTP Response):
    *   Receives reply on res.user-service.api-gateway.register, matches corrId_123.
    *   If Success Payload: Extracts token, user details. Constructs HTTP 201 Created response.
    *   If Error Payload: Extracts error message. Constructs HTTP 400 Bad Request (or other) response.
    *   Sends HTTP response back to Mobile App.

9.  Mobile App (Handle Response):
    *   Receives HTTP response.
    *   If 201 Created: Securely stores JWT, updates state (logged in), navigates to dashboard.
    *   If Error: Displays error message on registration screen.

Kafka Topics Used in Flow:
-------------------------
*   req.api-gateway.user-service.register (API GW -> User Svc)
*   res.user-service.api-gateway.register (User Svc -> API GW)
*   req.user-service.district-service.get-by-address (User Svc -> District Svc)
*   res.district-service.user-service.get-by-address (District Svc -> User Svc)
*   evt.user-service.user-registered (User Svc -> Any Interested Consumer [Async]) 